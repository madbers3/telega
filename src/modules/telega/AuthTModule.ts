import {boundClass} from "autobind-decorator";
import Telegraf, {Markup} from 'telegraf';
import IContextMessageUpdateMK2 from "../../interfaces/IContextMessageUpdateMK2";
import * as WizardScene from 'telegraf/scenes/wizard';
import * as Stage from 'telegraf/stage';
import * as validator from 'validator';
// https://www.npmjs.com/package/randomatic
import * as randomize from 'randomatic';
import mail from "../../models/business/mail";
import * as Mail from "nodemailer/lib/mailer";
import User from "../../models/mongo/User";

@boundClass
export default class AuthTModule {
  private bot: Telegraf<IContextMessageUpdateMK2>;
  private stages = {reg: 'registration', recover: 'recover', login: 'login'};

  leaveMessages = [
    '–ù–µ —Ö–æ—á—É',
    '–î–∞ –Ω—É —Ç–µ–±—è',
    ':((',
    '–í—ã—Ö–æ–¥',
    '–í—ã–π—Ç–∏',
    '–•–≤–∞—Ç–∏—Ç',
    '–ù–µ –Ω–∞–¥–æ',
    '–ó–∞–≤–µ—Ä—à–∏'
  ];

  private rules = {
    password: {
      minLength: 6,
      maxLength: 255
    }
  };

  constructor(bot: Telegraf<IContextMessageUpdateMK2>) {
    this.bot = bot;

    const stage = new Stage([this.getRegistrationScene(), this.getLoginScene(), this.getRecoverPasswordScene()]);

    bot.use(stage.middleware());

    bot.hears('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', AuthTModule.notAuthorized, async (ctx) => {
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!", Markup.inlineKeyboard([
        Markup.callbackButton("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç!", this.stages.reg),
        Markup.callbackButton("–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç!", this.stages.login),
        Markup.callbackButton("–Ø –∑–∞–±—ã–ª —Å–≤–æ–π –ø–∞—Ä–æ–ª—å..", this.stages.recover)
      ], {columns: 2}).extra());
    });

    bot.hears(['–í—Ö–æ–¥', '–í–æ–π—Ç–∏'], AuthTModule.notAuthorized, async (ctx) => {
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!", Markup.inlineKeyboard([
        Markup.callbackButton("–í–æ–π—Ç–∏!", this.stages.login),
        Markup.callbackButton("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç!", this.stages.reg),
        Markup.callbackButton("–Ø –∑–∞–±—ã–ª —Å–≤–æ–π –ø–∞—Ä–æ–ª—å..", this.stages.recover)
      ], {columns: 2}).extra());
    });

    bot.hears(['–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∞—É–Ω—Ç–∞', '–õ–æ–≥–∞—É—Ç'], AuthTModule.authorized, (ctx) => {
      ctx.session.user = undefined;
      ctx.reply('–í—ã—Ö–æ–∂—É..');
    });

    bot.action(this.stages.reg, AuthTModule.notAuthorized, async (ctx) => {
      ctx.scene.enter(this.stages.reg);
    });

    bot.action(this.stages.login, AuthTModule.notAuthorized, async (ctx) => {
      ctx.scene.enter(this.stages.login);
    });

    bot.action(this.stages.recover, AuthTModule.notAuthorized, async (ctx) => {
      ctx.scene.enter(this.stages.recover);
    });
  }

  private getRegistrationScene(): WizardScene {
    return new WizardScene(this.stages.reg,
      async (ctx) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.reg);
        }
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Email');
        return ctx.wizard.next();
      },
      async (ctx) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.reg);
        }

        ctx.message.text = ctx.message.text.trim();

        if (typeof ctx.message.text !== 'string' || !validator.isEmail(ctx.message.text)) {
          await ctx.reply('–≠—Ç–æ –Ω–µ Email :((');
          ctx.wizard.back();
          return ctx.wizard.next();
        }

        if (await User.findOne({email: ctx.message.text})) {
          await ctx.reply('–¢–∞–∫–æ–π email —É–∂–µ –∑–∞–Ω—è—Ç...');
          ctx.wizard.back();
          return ctx.wizard.next();
        }

        ctx.wizard.state.email = ctx.message.text;

        await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        await ctx.reply(`–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç ${this.rules.password.minLength} –¥–æ ${this.rules.password.maxLength} —Å–∏–º–≤–æ–ª–æ–≤: UTF-8`);
        await ctx.reply('–¢–∞–∫–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–º–Ω–∏—Ç–µ.');
        return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },
      async (ctx) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.reg);
        }

        ctx.message.text = ctx.message.text.trim();

        if (typeof ctx.message.text !== 'string' || !validator.isLength(ctx.message.text, this.rules.password.minLength, this.rules.password.maxLength)) {
          await ctx.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∞—Ä–æ–ª—å üßê');
          ctx.wizard.back();
          return ctx.wizard.next();
        }

        ctx.wizard.state.password = ctx.message.text;

        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å');

        return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },
      async (ctx) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.reg);
        }

        if (ctx.wizard.state.password !== ctx.message.text) {
          if (ctx.message.text.toLowerCase() === "–Ω–∞–∑–∞–¥") {
            ctx.wizard.back();
            ctx.wizard.back();
            await ctx.reply('–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å');
            return ctx.wizard.next();
          }

          if (!ctx.wizard.state.memory1) {
            await ctx.reply('ü§∑üèª‚Äç‚ôÄÔ∏è–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—Å—è "–Ω–∞–∑–∞–¥", —Ç–æ —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏ ü§î');
          } else {
            await ctx.reply('–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ü§î');
          }

          ctx.wizard.state.memory1 = true;

          ctx.wizard.back();
          return ctx.wizard.next();
        }

        await ctx.reply('–•–æ—Ä–æ—à–æ, –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç');

        await ctx.reply('–î–∞–≤–∞–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º —Ç–≤–æ–π EMAIL, —è –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–¥–æ–º üì®');
        await ctx.reply('–Ø –æ—Ç–º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Ç—ã –≤–≤–µ–¥–µ—à—å –ø–∞—Ä–æ–ª—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');

        const secretCode: string = randomize('AAAAA');

        const message: Mail.Options = {
          from: 'Alice üëª',
          to: ctx.wizard.state.email,
          subject: 'Alice üëª',
          html:
            `
          <p>–ü—Ä–∏–≤–µ—Ç, –º–æ–∂–µ—Ç–µ –ª–∏ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email –∞–¥–¥—Ä–µ—Å—Å?</p>
          CODE: ` + secretCode
        };

        ctx.wizard.state.emailCode = secretCode;
        ctx.wizard.state.attempts = 0;

        await mail.sendEmail(message);

        return ctx.wizard.next();
      },
      async (ctx: IContextMessageUpdateMK2) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.reg);
        }

        ctx.wizard.state.attempts++;

        if (ctx.wizard.state.emailCode !== ctx.message.text) {
          await ctx.reply('–•–º, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥');

          if (ctx.wizard.state.attempts >= 3) {
            await ctx.reply('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, —è –æ—Ç–º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —ç—Ö —Ç—ã');
            return ctx.scene.leave(this.stages.reg);
          }
          await ctx.reply('–û—Å—Ç–∞–ª–æ—Å—å ' + (3 - ctx.wizard.state.attempts) + ' –ø–æ–ø—ã—Ç–æ–∫');
          ctx.wizard.back();
          return ctx.wizard.next();
        }

        await ctx.reply('–î–∞, –ø–æ–ª—É—á–∏–ª–æ—Å—å');

        const user = new User();

        user.firstName = ctx.message.chat.first_name;
        user.chatId = ctx.message.chat.id;
        user.email = ctx.wizard.state.email;
        user.hash = user.createHash(ctx.wizard.state.password);

        await user.save();

        ctx.session.user = {
          id: user.id,
          firstName: user.firstName,
          email: user.email,
          chatId: user.chatId
        };

        await ctx.reply('–ü–æ—Ö–æ–∂–µ –≤—Å—ë, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üòÅ');

        return ctx.wizard.next();
      },

      async (ctx) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.reg);
        }

        return ctx.scene.leave(this.stages.reg);
      }
    );
  }

  private getLoginScene(): WizardScene {
    return new WizardScene(this.stages.login,
      async (ctx) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.login);
        }
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Email');
        return ctx.wizard.next();
      },
      async (ctx) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.login);
        }

        ctx.message.text = ctx.message.text.trim();

        if (typeof ctx.message.text !== 'string' || !validator.isEmail(ctx.message.text)) {
          await ctx.reply('–≠—Ç–æ –Ω–µ Email, —ç—Ö');
          ctx.wizard.back();
          return ctx.wizard.next();
        }

        await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');

        ctx.wizard.state.email = ctx.message.text;

        return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },
      async (ctx) => {
        if (await this.stageLeave(ctx)) {
          return ctx.scene.leave(this.stages.login);
        }

        ctx.message.text = ctx.message.text.trim();

        if (typeof ctx.message.text !== 'string' || !validator.isLength(ctx.message.text, this.rules.password.minLength, this.rules.password.maxLength)) {
          if (ctx.message.text.toLowerCase() === "–Ω–∞–∑–∞–¥") {
            ctx.wizard.back();
            ctx.wizard.back();
            await ctx.reply('–•–æ—Ä–æ—à–æ, –≤–≤–æ–¥–∏—Ç–µ Email');
            return ctx.wizard.next();
          }

          await ctx.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∞—Ä–æ–ª—å üßê');
          await ctx.reply(`–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç ${this.rules.password.minLength} –¥–æ ${this.rules.password.maxLength} —Å–∏–º–≤–æ–ª–æ–≤: UTF-8`);
          ctx.wizard.back();
          return ctx.wizard.next();
        }

        const user = await User.findOne({email: ctx.wizard.state.email});

        if (!user || !user.verifyPassword(ctx.message.text, user.hash)) {
          await ctx.reply('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
          ctx.wizard.back();
          return ctx.wizard.next();
        }

        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ö–æ–∑—è–∏–Ω ‚ù§Ô∏è');

        ctx.session.user = {
          id: user.id,
          firstName: user.firstName,
          email: user.email,
          chatId: user.chatId
        };

        return ctx.scene.leave(this.stages.login);
      }
    );
  }

  private getRecoverPasswordScene(): WizardScene {
    return new WizardScene(this.stages.recover,
      async (ctx) => {
        await ctx.reply('–û—É.. –∫–∞–∫–∞—è –Ω–µ—É–¥–∞—á–∞');
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Email –∞–¥—Ä–µ—Å—Å');
        return ctx.wizard.next();
      },
      async (ctx) => {
        await ctx.reply('–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –ø–∞—Ä–æ–ª—å –∏–ª–∏ Google Auth?');
        return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },
      async (ctx) => {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ GOOGLE AUTH');
        return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },
    );
  }

  private async stageLeave(ctx): Promise<boolean> {
    if (!ctx.message) {
      return false;
    }
    const result = this.isLeaveMessage(ctx.message.text);
    if (result) {
      await ctx.reply('–•–æ—Ä–æ—à–æ... –ù–µ –Ω–∞–¥–æ —Ç–∞–∫ –Ω–µ –Ω–∞–¥–æ')
    }
    return result;
  }

  private isLeaveMessage(message: string): boolean {
    for (const leaveMessage of this.leaveMessages) {
      if (message.toLowerCase() === leaveMessage.toLowerCase()) {
        return true;
      }
    }
    return false;
  }

  private static async notAuthorized(ctx, next) {
    if (ctx.session.user) {
      await ctx.reply('–•–æ–∑—è–∏–Ω, –≤—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }

    next(ctx);
  }

  private static async authorized(ctx, next) {
    if (!ctx.session.user) {
      await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ');
      return;
    }

    next(ctx);
  }
}
